{
  "version": 3,
  "sources": ["src/main.ts", "src/apiServer.ts", "src/settings.ts"],
  "sourcesContent": ["import { App, Notice, Plugin } from \"obsidian\";\r\nimport { APIBridgeServer } from \"./apiServer\";\r\nimport { APIBridgeSettingTab } from \"./settings\";\r\n\r\nexport interface APIBridgeSettings {\r\n  port: number;\r\n  authToken: string;\r\n}\r\n\r\nconst DEFAULT_SETTINGS: APIBridgeSettings = {\r\n  port: 27124,\r\n  authToken: \"my-secret-token\",\r\n};\r\n\r\nexport default class APIBridgePlugin extends Plugin {\r\n  settings: APIBridgeSettings;\r\n  private apiServer: APIBridgeServer;\r\n\r\n  async onload() {\r\n    console.log(\"Loading API Bridge Plugin...\");\r\n    await this.loadSettings();\r\n\r\n    // Initialize and start the API server\r\n    this.apiServer = new APIBridgeServer(this.app.vault, this.settings);\r\n    this.apiServer.start();\r\n\r\n    // Add the settings tab\r\n    this.addSettingTab(new APIBridgeSettingTab(this.app, this));\r\n\r\n    // Add a command to reload the server\r\n    this.addCommand({\r\n      id: \"reload-api-bridge-server\",\r\n      name: \"Reload API Bridge Server\",\r\n      callback: async () => {\r\n        await this.reloadServer();\r\n        new Notice(\"API Bridge server reloaded.\");\r\n      },\r\n    });\r\n  }\r\n\r\n  async onunload() {\r\n    console.log(\"Unloading API Bridge Plugin...\");\r\n    this.apiServer.shutdown();\r\n  }\r\n\r\n  async loadSettings() {\r\n    const data = await this.loadData();\r\n    this.settings = Object.assign({}, DEFAULT_SETTINGS, data);\r\n  }\r\n\r\n  async saveSettings() {\r\n    await this.saveData(this.settings);\r\n  }\r\n\r\n  async reloadServer() {\r\n    this.apiServer.shutdown();\r\n    this.apiServer = new APIBridgeServer(this.app.vault, this.settings);\r\n    this.apiServer.start();\r\n  }\r\n}\r\n", "import { Vault, TFile } from \"obsidian\";\r\nimport { createServer, IncomingMessage, ServerResponse } from \"http\";\r\nimport { APIBridgeSettings } from \"./main\";\r\n\r\nexport class APIBridgeServer {\r\n  private server: ReturnType<typeof createServer> | null = null;\r\n  private vault: Vault;\r\n  private settings: APIBridgeSettings;\r\n\r\n  constructor(vault: Vault, settings: APIBridgeSettings) {\r\n    this.vault = vault;\r\n    this.settings = settings;\r\n  }\r\n\r\n  start() {\r\n    // Close any existing server\r\n    this.shutdown();\r\n    this.server = createServer((req: IncomingMessage, res: ServerResponse) =>\r\n      this.handleRequest(req, res)\r\n    );\r\n    this.server.listen(this.settings.port, () => {\r\n      console.log(`API Bridge server listening on port ${this.settings.port}`);\r\n    });\r\n  }\r\n\r\n  shutdown() {\r\n    if (this.server) {\r\n      try {\r\n        this.server.close();\r\n        console.log(\"API Bridge server closed.\");\r\n      } catch (err) {\r\n        console.error(\"Error closing server:\", err);\r\n      }\r\n      this.server = null;\r\n    }\r\n  }\r\n\r\n  private handleRequest(req: IncomingMessage, res: ServerResponse) {\r\n    try {\r\n      if (!this.isAuthorized(req)) {\r\n        this.unauthorizedResponse(res);\r\n        return;\r\n      }\r\n\r\n      const url = new URL(req.url ?? \"\", `http://${req.headers.host}`);\r\n      const method = req.method?.toUpperCase() || \"GET\";\r\n      const pathParts = url.pathname.split(\"/\").filter(Boolean);\r\n\r\n      // GET /api/notes \u2192 list all notes\r\n      if (method === \"GET\" && pathParts.length === 2) {\r\n        this.listNotes(res);\r\n        return;\r\n      }\r\n\r\n      // GET /api/notes/<filePath> \u2192 read a note\r\n      if (method === \"GET\" && pathParts.length === 3) {\r\n        const filePath = decodeURIComponent(pathParts[2]);\r\n        this.readNote(filePath, res);\r\n        return;\r\n      }\r\n\r\n      // POST /api/notes/<filePath> \u2192 write (create or overwrite) a note\r\n      if (method === \"POST\" && pathParts.length === 3) {\r\n        let bodyData = \"\";\r\n        req.on(\"data\", (chunk) => { bodyData += chunk; });\r\n        req.on(\"end\", () => {\r\n          try {\r\n            const parsedBody = JSON.parse(bodyData);\r\n            this.writeNote(decodeURIComponent(pathParts[2]), parsedBody, res);\r\n          } catch (err) {\r\n            this.internalErrorResponse(res, err as Error);\r\n          }\r\n        });\r\n        return;\r\n      }\r\n\r\n      this.notFoundResponse(res);\r\n    } catch (err) {\r\n      console.error(\"Server error:\", err);\r\n      this.internalErrorResponse(res, err as Error);\r\n    }\r\n  }\r\n\r\n  private isAuthorized(req: IncomingMessage): boolean {\r\n    const token = req.headers[\"x-api-token\"];\r\n    return token === this.settings.authToken;\r\n  }\r\n\r\n  private listNotes(res: ServerResponse) {\r\n    try {\r\n      const files = this.vault.getFiles();\r\n      const fileList = files.map((file) => ({\r\n        path: file.path,\r\n        name: file.name,\r\n      }));\r\n      res.writeHead(200, { \"Content-Type\": \"application/json\" });\r\n      res.end(JSON.stringify({ files: fileList }));\r\n    } catch (err) {\r\n      this.internalErrorResponse(res, err as Error);\r\n    }\r\n  }\r\n\r\n  private async readNote(filePath: string, res: ServerResponse) {\r\n    try {\r\n      const file = this.vault.getAbstractFileByPath(filePath);\r\n      if (!file || !(file instanceof TFile)) {\r\n        this.notFoundResponse(res);\r\n        return;\r\n      }\r\n      const content = await this.vault.read(file);\r\n      res.writeHead(200, { \"Content-Type\": \"application/json\" });\r\n      res.end(JSON.stringify({ content }));\r\n    } catch (err) {\r\n      this.internalErrorResponse(res, err as Error);\r\n    }\r\n  }\r\n\r\n  private async writeNote(filePath: string, body: any, res: ServerResponse) {\r\n    try {\r\n      const { content } = body ?? {};\r\n      if (typeof content !== \"string\") {\r\n        this.badRequestResponse(res, 'Missing \"content\" string in request body.');\r\n        return;\r\n      }\r\n      let file = this.vault.getAbstractFileByPath(filePath);\r\n      if (!file) {\r\n        file = await this.vault.create(filePath, content);\r\n      } else if (!(file instanceof TFile)) {\r\n        this.badRequestResponse(res, \"Path refers to a folder, not a file.\");\r\n        return;\r\n      } else {\r\n        await this.vault.modify(file, content);\r\n      }\r\n      res.writeHead(200, { \"Content-Type\": \"application/json\" });\r\n      res.end(JSON.stringify({ message: \"File written successfully.\" }));\r\n    } catch (err) {\r\n      this.internalErrorResponse(res, err as Error);\r\n    }\r\n  }\r\n\r\n  private badRequestResponse(res: ServerResponse, message: string) {\r\n    res.writeHead(400, { \"Content-Type\": \"application/json\" });\r\n    res.end(JSON.stringify({ error: message }));\r\n  }\r\n\r\n  private notFoundResponse(res: ServerResponse) {\r\n    res.writeHead(404, { \"Content-Type\": \"application/json\" });\r\n    res.end(JSON.stringify({ error: \"Not found\" }));\r\n  }\r\n\r\n  private unauthorizedResponse(res: ServerResponse) {\r\n    res.writeHead(401, { \"Content-Type\": \"application/json\" });\r\n    res.end(JSON.stringify({ error: \"Unauthorized\" }));\r\n  }\r\n\r\n  private internalErrorResponse(res: ServerResponse, err: Error) {\r\n    res.writeHead(500, { \"Content-Type\": \"application/json\" });\r\n    res.end(JSON.stringify({ error: err.message }));\r\n  }\r\n}\r\n", "import { App, Notice, PluginSettingTab, Setting } from \"obsidian\";\r\nimport APIBridgePlugin from \"./main\";\r\n\r\nexport class APIBridgeSettingTab extends PluginSettingTab {\r\n  plugin: APIBridgePlugin;\r\n\r\n  constructor(app: App, plugin: APIBridgePlugin) {\r\n    super(app, plugin);\r\n    this.plugin = plugin;\r\n  }\r\n\r\n  display(): void {\r\n    const { containerEl } = this;\r\n    containerEl.empty();\r\n    containerEl.createEl(\"h2\", { text: \"API Bridge Settings\" });\r\n\r\n    // Port setting\r\n    new Setting(containerEl)\r\n      .setName(\"Port\")\r\n      .setDesc(\"Port on which the local API server will listen.\")\r\n      .addText((text) =>\r\n        text\r\n          .setPlaceholder(\"27124\")\r\n          .setValue(String(this.plugin.settings.port))\r\n          .onChange(async (value) => {\r\n            const port = Number(value);\r\n            if (!isNaN(port)) {\r\n              this.plugin.settings.port = port;\r\n              await this.plugin.saveSettings();\r\n              await this.plugin.reloadServer();\r\n              new Notice(`API server port updated to ${port} and restarted.`);\r\n            }\r\n          })\r\n      );\r\n\r\n    // Auth Token setting\r\n    new Setting(containerEl)\r\n      .setName(\"Auth Token\")\r\n      .setDesc(\"Requests must include this token in the X-API-Token header.\")\r\n      .addText((text) =>\r\n        text\r\n          .setPlaceholder(\"my-secret-token\")\r\n          .setValue(this.plugin.settings.authToken)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.authToken = value.trim();\r\n            await this.plugin.saveSettings();\r\n            new Notice(\"Auth token updated.\");\r\n          })\r\n      );\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["main_exports", "__export", "APIBridgePlugin", "__toCommonJS", "import_obsidian", "import_obsidian", "import_http", "APIBridgeServer", "vault", "settings", "req", "res", "err", "url", "method", "pathParts", "filePath", "bodyData", "chunk", "parsedBody", "fileList", "file", "content", "body", "message", "import_obsidian", "APIBridgeSettingTab", "app", "plugin", "containerEl", "text", "value", "port", "DEFAULT_SETTINGS", "APIBridgePlugin", "APIBridgeServer", "APIBridgeSettingTab", "data"]
}
